{"version":3,"sources":["pages/hospitalCode/index.module.scss","util/request.ts","service/baseURL.ts","pages/hospitalCode/HospitalSearch.tsx","service/hospitalCode.ts","pages/hospitalCode/index.tsx"],"names":["module","exports","input","input-explain","input-error","hospitalNameClass","hospitalAddressClass","axios","defaults","baseURL","rq","create","timeout","withCredentials","transformRequest","data","ret","it","encodeURIComponent","interceptors","request","use","config","error","Promise","reject","response","res","status","message","warning","window","location","href","url","name","get","post","Search","HospitalSearch","props","_useState","useState","_useState2","Object","slicedToArray","validateInput","setValidateInput","getData","handleSearch","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","val","dataSource","wrap","_context","prev","next","hospitalName","then","i","length","key","sent","abrupt","stop","_x","apply","this","arguments","react_default","createElement","className","style","placeholder","onSearch","allowClear","enterButton","autoComplete","onChange","e","target","value","HospitalCode","tableData","setTableData","_useState3","_useState4","currentPage","setCurrentPage","_useState5","_useState6","pageSize","setPageSize","_useState7","_useState8","total","setTotal","_useState9","_useState10","showPagination","setShowPagination","useEffect","getAllHospitalDetail","Fragment","hospitalCode_HospitalSearch","info","table","bordered","size","locale","emptyText","columns","title","dataIndex","pagination","showQuickJumper","showSizeChanger","defaultCurrent","current","onShowSizeChange"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,4BAAAC,gBAAA,oCAAAC,cAAA,kCAAAC,kBAAA,wCAAAC,qBAAA,6MCGlBC,IAAMC,SAASC,QAAU,GAGzB,IAAIC,EAAKH,IAAMI,OAAO,CACpBC,QAAS,IACTC,iBAAiB,EACjBC,iBAAkB,CAAE,SAAAC,GAClB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAMF,EACbC,GAAOE,mBAAmBD,GAAM,IAAMC,mBAAmBH,EAAKE,IAAO,IAEvE,OAAOD,MAKXN,EAAGS,aAAaC,QAAQC,IACtB,SAACC,GACC,OAAOA,GAET,SAACC,GACC,OAAOC,QAAQC,OAAOF,KAI1Bb,EAAGS,aAAaO,SAASL,IACvB,SAACM,GAAQ,IACDZ,EAASY,EAATZ,KAON,OALoB,OAAhBA,EAAKa,QACPC,EAAA,EAAQC,QAAQ,+DAAc,WAC5BC,OAAOC,SAASC,KAAOlB,EAAKA,KAAKmB,MAG9BP,GAET,SAACJ,GAEC,OADAM,EAAA,EAAQN,MAAMA,EAAMY,MACbX,QAAQC,OAAOF,KAIhBb,EAAG0B,IAAb,IACIC,EAAO3B,EAAG2B,KCzCC5B,EAFH,uECCN6B,EAASpC,EAAA,EAAMoC,OAuCNC,EAtCQ,SAACC,GAAyB,IAAAC,EACPC,mBAAS,GADFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1CK,EAD0CH,EAAA,GAC3BI,EAD2BJ,EAAA,GAEzCK,EAAYR,EAAZQ,QASFC,EAAY,eAAAC,EAAAN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACK,IAAlBf,EADa,CAAAa,EAAAE,KAAA,eAAAF,EAAAE,KAAA,ECXZxB,EADG5B,EAAU,YACH,CAAEqD,aDa0BN,ICbVO,KAAK,SAACpC,GACvC,IAAK,IAAIqC,EAAI,EAAGA,EAAIrC,EAAIZ,KAAKA,KAAKkD,OAAQD,IACxCrC,EAAIZ,KAAKA,KAAKiD,GAAGE,IAAMF,EAEzB,OAAOrC,EAAIZ,KAAKA,ODOC,OAEX0C,EAFWE,EAAAQ,KAGfnB,EAAQS,GAHOE,EAAAE,KAAA,sBAAAF,EAAAS,OAAA,kCAAAT,EAAAU,SAAAd,MAAH,gBAAAe,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,GAQhB,OACEC,EAAArB,EAAAsB,cAAA,OAAKC,UAAWC,IAAM3E,OACpBwE,EAAArB,EAAAsB,cAACrC,EAAD,CACEwC,YAAY,6CACZC,SAAU9B,EACV+B,YAAY,EACZC,aAAW,EACXC,aAAa,MACbC,SAxBa,SAACC,GACRA,EAAEC,OAAOC,MAKnBvC,EAAiB,GAHfA,EAAiB,IAsBf6B,UAA6B,IAAlB9B,EAAsB,GAAK,cAExC4B,EAAArB,EAAAsB,cAAA,OACEC,UAAWC,IAAM,iBAAmB,KAAyB,IAAlB/B,EAAsB+B,IAAM,eAAiB,KAD1F,6DEgCSU,UA9DM,SAAC/C,GAAyB,IAAAC,EACXC,qBADWC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtC+C,EADsC7C,EAAA,GAC3B8C,EAD2B9C,EAAA,GAAA+C,EAEPhD,mBAAS,GAFFiD,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAEtCE,EAFsCD,EAAA,GAEzBE,EAFyBF,EAAA,GAAAG,EAGbpD,mBAAS,IAHIqD,EAAAnD,OAAAC,EAAA,EAAAD,CAAAkD,EAAA,GAGtCE,EAHsCD,EAAA,GAG5BE,EAH4BF,EAAA,GAAAG,EAInBxD,mBAAS,GAJUyD,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAItCE,EAJsCD,EAAA,GAI/BE,EAJ+BF,EAAA,GAAAG,EAKD5D,oBAAS,GALR6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAKtCE,EALsCD,EAAA,GAKtBE,EALsBF,EAAA,GAO7CG,oBAAU,YDCsB,SAACd,EAAqBI,GAEtD,OAAO3D,EADG5B,EAAU,gBACH,CAAEmF,cAAaI,aAAYjC,KAAK,SAACpC,GAChD,IAAK,IAAIqC,EAAI,EAAGA,EAAIrC,EAAIZ,KAAKA,KAAKkD,OAAQD,IACxCrC,EAAIZ,KAAKA,KAAKiD,GAAGE,IAAMF,EAEzB,OAAOrC,EAAIZ,QCNX4F,CAAqBf,EAAaI,GAAUjC,KAAK,SAAChD,GAChD0E,EAAa1E,EAAKA,MAClBsF,EAAStF,EAAKqF,OAAS,MAExB,CAACR,EAAaI,IAgCjB,OACEtB,EAAArB,EAAAsB,cAACD,EAAArB,EAAMuD,SAAP,KACElC,EAAArB,EAAAsB,cAACkC,EAAD,CAAgB7D,QAdI,SAACS,GACG,IAAtBA,EAAWQ,QACbpC,EAAA,EAAQiF,KAAK,mDAAY,IAG3Bb,EAAY,IAEZJ,EAAe,GAEfY,GAAkB,GAClBhB,EAAahC,MAKXiB,EAAArB,EAAAsB,cAAAoC,EAAA,GAAOC,UAAU,EAAMC,KAAK,SAASC,OAAQ,CAAEC,UAAW,wCAAYC,QAlC1D,CACd,CAAEC,MAAO,eAAMC,UAAW,eAAgBpD,IAAK,QAC/C,CACEmD,MAAO,2BACPC,UAAW,eACXpD,IAAK,eACLU,UAAW,qBAEb,CAAEyC,MAAO,2BAAQC,UAAW,SAAUpD,IAAK,UAC3C,CAAEmD,MAAO,2BAAQC,UAAW,OAAQpD,IAAK,QACzC,CAAEmD,MAAO,2BAAQC,UAAW,QAASpD,IAAK,SAC1C,CAAEmD,MAAO,2BAAQC,UAAW,UAAWpD,IAAK,UAAWU,UAAW,yBAuBwB2C,YAAY,EAAO9D,WAAY+B,IACtHgB,GAAkB9B,EAAArB,EAAAsB,cAAA4C,EAAA,GACjB3C,UAAU,kBACV4C,iBAAe,EACfC,iBAAe,EACfC,eAAgB,EAChBtB,MAAOA,EACPuB,QAAS/B,EACTI,SAAUA,EACVb,SA9BW,SAACS,GAChBC,EAAeD,IA8BXgC,iBA5BiB,SAACD,EAAiB3B,GACvCC,EAAYD","file":"static/js/4.ebb6420d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"hospitalCode_input__2CrA9\",\"input-explain\":\"hospitalCode_input-explain__2WN9D\",\"input-error\":\"hospitalCode_input-error__1L9vh\",\"hospitalNameClass\":\"hospitalCode_hospitalNameClass__3EMrd\",\"hospitalAddressClass\":\"hospitalCode_hospitalAddressClass__3T6mv\"};","import { message } from 'antd';\nimport axios from 'axios';\n\n// 全局默认设置\naxios.defaults.baseURL = '';\n\n// 创建实例\nlet rq = axios.create({\n  timeout: 5000,\n  withCredentials: true,\n  transformRequest: [ data => {\n    let ret = '';\n    for (let it in data) {\n      ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&';\n    }\n    return ret;\n  }]\n});\n\n// 全局拦截器\nrq.interceptors.request.use(\n  (config) => {\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nrq.interceptors.response.use(\n  (res) => {\n    let { data } = res;\n    // 登录过期\n    if (data.status === 1001) {\n      message.warning('登录失效，请重新登录', () => {\n        window.location.href = data.data.url;\n      });\n    }\n    return res;\n  },\n  (error) => {\n    message.error(error.name);\n    return Promise.reject(error);\n  }\n);\n\nlet get = rq.get;\nlet post = rq.post;\n\nexport { get, post };\n","let baseURL = '';\nif (process.env.NODE_ENV === 'development') {\n  baseURL = '/api/';\n} else {\n  baseURL = '/api/';\n}\nexport default baseURL;\n","import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport { getHospitalDetail } from '../../service/hospitalCode';\nimport style from './index.module.scss';\nimport { hospitalProps } from './interface';\nconst Search = Input.Search;\nconst HospitalSearch = (props: hospitalProps) => {\n  let [validateInput, setValidateInput] = useState(0);\n  let { getData } = props;\n  let handleChange = (e: any) => {\n    let val = e.target.value;\n    if (!val) {\n      setValidateInput(1);\n      return;\n    }\n    setValidateInput(0);\n  };\n  let handleSearch = async (val: string) => {\n    if (validateInput === 0) {\n      let dataSource = await getHospitalDetail(val);\n      getData(dataSource);\n    } else {\n      return;\n    }\n  };\n  return (\n    <div className={style.input}>\n      <Search\n        placeholder=\"请输入医院名称\"\n        onSearch={handleSearch}\n        allowClear={true}\n        enterButton\n        autoComplete=\"off\"\n        onChange={handleChange}\n        className={validateInput === 0 ? '' : 'has-error'}\n      />\n      <div\n        className={style['input-explain'] + ' ' + (validateInput === 1 ? style['input-error'] : '')}\n      >\n        医院名称不能为空\n      </div>\n    </div>\n  );\n};\nexport default HospitalSearch;\n","import { AxiosPromise } from 'axios';\nimport { post } from '../util/request';\nimport baseURL from './baseURL';\n\nexport let getHospitalDetail = (hospitalName: string): AxiosPromise<any> => {\n  let url = baseURL + '/hospital';\n  return post(url, { hospitalName }).then((res) => {\n    for (let i = 0; i < res.data.data.length; i++) {\n      res.data.data[i].key = i;\n    }\n    return res.data.data;\n  });\n};\n\nexport let getAllHospitalDetail = (currentPage: number, pageSize: number): AxiosPromise<any> => {\n  let url = baseURL + '/hospital/all';\n  return post(url, { currentPage, pageSize }).then((res) => {\n    for (let i = 0; i < res.data.data.length; i++) {\n      res.data.data[i].key = i;\n    }\n    return res.data;\n  });\n};\n","import { message, Pagination, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { getAllHospitalDetail } from '../../service/hospitalCode';\nimport HospitalSearch from './HospitalSearch';\nimport './index.less';\nimport { hospitalProps } from './interface.d';\nconst HospitalCode = (props: hospitalProps) => {\n  const [tableData, setTableData] = useState();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [total, setTotal] = useState(0);\n  const [showPagination, setShowPagination] = useState(true);\n\n  useEffect(() => {\n    getAllHospitalDetail(currentPage, pageSize).then((data: any) => {\n      setTableData(data.data);\n      setTotal(data.total || 0);\n    });\n  }, [currentPage, pageSize]);\n  const columns = [\n    { title: '编码', dataIndex: 'hospitalCode', key: 'code' },\n    {\n      title: '医院名称',\n      dataIndex: 'hospitalName',\n      key: 'hospitalName',\n      className: 'hospitalNameClass'\n    },\n    { title: '所属区县', dataIndex: 'county', key: 'county' },\n    { title: '医院类别', dataIndex: 'type', key: 'type' },\n    { title: '医院等级', dataIndex: 'level', key: 'level' },\n    { title: '医院地址', dataIndex: 'address', key: 'address', className: 'hospitalAddressClass' }\n  ];\n  let pageChange = (currentPage: number) => {\n    setCurrentPage(currentPage);\n  };\n  let onShowSizeChange = (current: number, pageSize: number) => {\n    setPageSize(pageSize);\n  };\n  let getHospitalDetail = (dataSource: any) => {\n    if (dataSource.length === 0) {\n      message.info('未查询到医院信息', 0.8);\n    }\n    // 默认每一页的数量\n    setPageSize(10);\n    // 默认当前页\n    setCurrentPage(1);\n    // 隐藏分页器\n    setShowPagination(false);\n    setTableData(dataSource);\n  };\n  return (\n    <React.Fragment>\n      <HospitalSearch getData={getHospitalDetail} />\n      <Table bordered={true} size=\"middle\" locale={{ emptyText: '暂无医院信息' }} columns={columns} pagination={false} dataSource={tableData} />\n      {showPagination && <Pagination\n        className=\"tabelPagination\"\n        showQuickJumper\n        showSizeChanger\n        defaultCurrent={1}\n        total={total}\n        current={currentPage}\n        pageSize={pageSize}\n        onChange={pageChange}\n        onShowSizeChange={onShowSizeChange}\n      />}\n    </React.Fragment>\n  );\n};\nexport default HospitalCode;\n"],"sourceRoot":""}